# Terraform
parameters:
  version: ''
  path: ''
  ArtifactName: ''
  backend_secret_file_id: ''
  backend_file_path: ''
  main_secret_file_id: ''
  main_file_path: ''
  terraform_apply: false

steps:
- task: TerraformInstaller@0
  displayName: '${{ parameters.ArtifactName }} - Use Terraform ${{ parameters.version }}'
  inputs:
    terraformVersion: ${{ parameters.version }}

- script: |
    #Terraform Init
    if [ "${{ parameters.backend_file_path }}" != "" ] ; 
    then
      terraform init -backend-config="${{ parameters.backend_file_path }}" -backend-config="$(Agent.TempDirectory)/${{ parameters.backend_secret_file_id }}" -input=false -reconfigure
    else
      terraform init -backend-config="$(Agent.TempDirectory)/${{ parameters.backend_secret_file_id }}" -input=false -reconfigure
    fi

    #Terraform Plan
    if [ "${{ parameters.main_file_path }}" != "" ] ; 
    then
      terraform plan -var-file="${{ parameters.main_file_path }}" -var-file="$(Agent.TempDirectory)/${{ parameters.main_secret_file_id }}" -out="./out_plan_file" -input=false -detailed-exitcode > /dev/null
    else
      terraform plan -var-file="$(Agent.TempDirectory)/${{ parameters.main_secret_file_id }}" -out="./out_plan_file" -input=false -detailed-exitcode > /dev/null
    fi

    OUT=$?
    if [ $OUT -eq 0 ];then
        echo '##vso[task.setvariable variable=terraform_plan_exitcode]0'
        echo "${Correct} No changes. Infrastructure is up-to-date!"
    elif [ $OUT -eq 1 ];then
        echo '##vso[task.setvariable variable=terraform_plan_exitcode]1'
        echo "Terraform planned has failed!"
        exit 1
    elif [ $OUT -eq 2 ];then
        echo '##vso[task.setvariable variable=terraform_plan_exitcode]2'
        echo "${Warning}Changes have been noticed!"
        terraform show ./out_plan_file
    else
        echo "Terraform planned has failed!"
        exit 1
    fi
  displayName: '${{ parameters.ArtifactName }} - Terraform Plan'
  workingDirectory: ${{ parameters.path }}

- script: terraform apply "./out_plan_file"
  displayName: '${{ parameters.ArtifactName }} - Terraform Apply'
  workingDirectory: ${{ parameters.path }}
  condition: and(succeeded(), ${{ parameters.terraform_apply }}, eq(variables['terraform_plan_exitcode'], '2')) # this task will only run if terrafrom has prompted for changes and a terraform apply has been asked
  
- script: |
    echo "Compressing ${{ parameters.path }} directory ..."
    tar -czf ${{ parameters.ArtifactName }}.tar.gz -C ${{ parameters.path }} .
    mkdir -p ./ArtifactPublishLocation
    echo "Moving this archive directory to this location ./ArtifactPublishLocation ..."
    mv -f ${{ parameters.ArtifactName }}.tar.gz ./ArtifactPublishLocation/${{ parameters.ArtifactName }}.tar.gz
  displayName: '${{ parameters.ArtifactName }} - Compress ${{ parameters.path }} Artifact'