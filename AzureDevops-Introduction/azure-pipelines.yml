#Multi-stage YAML pipeline demo.
name: $(BuildDefinitionName).$(DayOfYear)$(Rev:.r)

variables:
- group: terraform_binary  # variable containing Terraform information like the Terraform version
- name: backend_main_secret_file_id1 # secret file used by the following cmdlet Terraform init, plan, apply and destroy 
  value: 'backend-main-jdld-1.json'
- name: ArtifactName
  value: 'AzureDevops-Introduction'
- name: PackageName1
  value: 'aks-k8s'

resources:
  repositories:
    - repository: terraform # identifier (A-Z, a-z, 0-9, and underscore)
      type: github
      endpoint: JamesDLD  # name of the service connection to use (for non-Azure Repos types)
      name: JamesDLD/terraform

trigger:
  batch: true # when a build is running, the system waits until the build is completed
  branches:
    include:
      - feature/*
  paths:
    include:
    - AzureDevops-Introduction/*

stages:
- stage: Build
  jobs:
  - job: Terraform_Plan_Linux
    continueOnError: false
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - script: echo Build job that will publish an Artifact if Infrastructure changes are identified.

    - checkout: self # self represents the repo where the initial Pipelines YAML file was found
      displayName: 'Checking out source code'
      clean: true # whether to fetch clean each time
      persistCredentials: true # set to 'true' to leave the OAuth token in the Git config after the initial fetch

    - task: DownloadSecureFile@1
      displayName: 'Download secure file $(backend_main_secret_file_id1)'
      inputs:
        secureFile: $(backend_main_secret_file_id1)

    - task: TerraformInstaller@0
      displayName: 'Use Terraform $(terraform_version)'
      inputs:
        terraformVersion: $(terraform_version)

    - script: |
        terraform init -backend-config="./variable/backend-jdld.tfvars" -backend-config="$(Agent.TempDirectory)/$(backend_main_secret_file_id1)" -reconfigure
        terraform plan -var-file="./variable/main-jdld.tfvars" -var-file="$(Agent.TempDirectory)/$(backend_main_secret_file_id1)" -out="./out_plan_file" -input=false 
        #terraform apply "./out_plan_file"
      displayName: 'Terraform Plan'
      workingDirectory: './AzureDevops-Introduction/aks-k8s/'

    # - script: |
    #     echo "Compressing ./AzureDevops-Introduction/aks-k8s/ directory ..."
    #     tar -czf aks-k8s.tar.gz -C ./AzureDevops-Introduction/aks-k8s/ .
    #     mkdir -p ./ArtifactPublishLocation
    #     echo "Moving this archive directory to this location ./ArtifactPublishLocation ..."
    #     mv -f aks-k8s.tar.gz ./ArtifactPublishLocation/aks-k8s.tar.gz
    #   displayName: 'Compress ./AzureDevops-Introduction/aks-k8s/ before Artifact publication'

    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: '$(ArtifactName)'
        targetPath: './$(ArtifactName)/' #'$(Build.ArtifactStagingDirectory)'

- stage: Deploy
  dependsOn: Build
  jobs:
    # track deployments on the environment
  - deployment: Terraform_Apply_Windows
    pool:
      vmImage: 'windows-2019'
    # creates an environment if it doesn’t exist
    environment: 'staging'
    strategy:
      # default deployment strategy
      runOnce:
        deploy:
          steps:
          - script: echo Deployment job in the staging environment

          # Download Pipeline Artifact
          - task: DownloadPipelineArtifact@1
            inputs:
              buildType: 'current' # Options: current, specific
              buildVersionToDownload: 'latest' # Required when buildType == Specific. Options: latest, latestFromBranch, specific
              artifactName: '$(ArtifactName)'

          - script: |
              ls
              echo $(System.ArtifactsDirectory)
              cd $(System.ArtifactsDirectory)
              ls
              cd ./aks-k8s
              ls
            displayName: 'Debug'

          # - task: ExtractFiles@1
          #   displayName: 'Extract files for package $(PackageName1)'
          #   inputs:
          #     archiveFilePatterns: '$(System.ArtifactsDirectory)/$(ArtifactName)/$(ArtifactName)/$(PackageName1).tar.gz'
          #     destinationFolder: './$(PackageName1)'

          - task: TerraformInstaller@0
            displayName: 'Use Terraform $(terraform_version)'
            inputs:
              terraformVersion: $(terraform_version)

          - script: terraform apply "./out_plan_file"
            displayName: 'Terraform Apply'
            workingDirectory: '$(System.ArtifactsDirectory)/$(PackageName1)'

- stage: Deliver
  dependsOn: Deploy
  jobs:
    # track deployments on the environment
  - deployment: Terraform_Destroy_MacOs
    pool:
      vmImage: macos-10.13
    # creates an environment if it doesn’t exist
    environment: 'production'
    strategy:
      # default deployment strategy
      runOnce:
        deploy:
          steps:
          - script: echo Deployment job in the production environment

          # # Download Pipeline Artifact
          # - task: DownloadPipelineArtifact@1
          #   inputs:
          #     buildType: 'current' # Options: current, specific
          #     buildVersionToDownload: 'latest' # Required when buildType == Specific. Options: latest, latestFromBranch, specific
          #     artifactName: 'AzureDevops-Introduction'

          - checkout: self # self represents the repo where the initial Pipelines YAML file was found
            displayName: 'Checking out source code'
            clean: true # whether to fetch clean each time
            persistCredentials: true # set to 'true' to leave the OAuth token in the Git config after the initial fetch

          - task: DownloadSecureFile@1
            displayName: 'Download secure file $(backend_main_secret_file_id1)'
            inputs:
              secureFile: $(backend_main_secret_file_id1) 

          - task: TerraformInstaller@0
            displayName: 'Use Terraform $(terraform_version)'
            inputs:
              terraformVersion: $(terraform_version)

          - script: |
              terraform init -backend-config="./variable/backend-jdld.tfvars" -backend-config="$(Agent.TempDirectory)/$(backend_main_secret_file_id1)" -reconfigure
              terraform destroy -var-file="./variable/main-jdld.tfvars" -var-file="$(Agent.TempDirectory)/$(backend_main_secret_file_id1)" -auto-approve
            displayName: 'Terraform Destroy'
            workingDirectory: './AzureDevops-Introduction/aks-k8s/'