#Multi-stage YAML pipeline demo.
name: $(BuildDefinitionName).$(DayOfYear)$(Rev:.r)

variables:
- group: terraform_binary  # variable containing Terraform information like the Terraform version
- name: backend_main_secret_file_id1 # secret file used by the following cmdlet Terraform init, plan, apply and destroy 
  value: 'backend-main-jdld-1.json'

resources:
  repositories:
    - repository: terraform # identifier (A-Z, a-z, 0-9, and underscore)
      type: github
      endpoint: JamesDLD  # name of the service connection to use (for non-Azure Repos types)
      name: JamesDLD/terraform

trigger:
  batch: true # when a build is running, the system waits until the build is completed
  branches:
    include:
      - feature/*
  paths:
    include:
    - AzureDevops-Introduction/*

stages:
- stage: Deployment
  jobs:
    # track deployments on the environment
  - deployment: Terraform_Apply_Linux
    pool:
      vmImage: 'Ubuntu-16.04'
    # creates an environment if it doesn’t exist
    environment: 'staging'
    strategy:
      # default deployment strategy
      runOnce:
        deploy:
          steps:
          - script: echo Deployment job in the staging environment

          - checkout: self # self represents the repo where the initial Pipelines YAML file was found
            displayName: 'Checking out source code'
            clean: true # whether to fetch clean each time
            persistCredentials: true # set to 'true' to leave the OAuth token in the Git config after the initial fetch

          - task: DownloadSecureFile@1
            displayName: 'Download secure file $(backend_main_secret_file_id1)'
            inputs:
              secureFile: $(backend_main_secret_file_id1)

          - task: TerraformInstaller@0
            displayName: 'Use Terraform $(terraform_version)'
            inputs:
              terraformVersion: $(terraform_version)

          - script: |
              terraform init -backend-config="./variable/backend-jdld.tfvars" -backend-config="$(Agent.TempDirectory)/$(backend_main_secret_file_id1)" -reconfigure
              terraform plan -var-file="./variable/main-jdld.tfvars" -var-file="$(Agent.TempDirectory)/$(backend_main_secret_file_id1)" -out="./out_plan_file" -input=false 
              terraform apply "./out_plan_file"
            displayName: 'Terraform Apply'
            workingDirectory: './AzureDevops-Introduction/aks-k8s/'

- stage: Delivery
  jobs:
    # track deployments on the environment
  - deployment: Terraform_Destroy_MacOs
    pool:
      vmImage: macos-10.13
    # creates an environment if it doesn’t exist
    environment: 'production'
    strategy:
      # default deployment strategy
      runOnce:
        deploy:
          steps:
          - script: echo Deployment job in the production environment

          - checkout: self # self represents the repo where the initial Pipelines YAML file was found
            displayName: 'Checking out source code'
            clean: true # whether to fetch clean each time
            persistCredentials: true # set to 'true' to leave the OAuth token in the Git config after the initial fetch

          - task: DownloadSecureFile@1
            displayName: 'Download secure file $(backend_main_secret_file_id1)'
            inputs:
              secureFile: $(backend_main_secret_file_id1) 

          - task: TerraformInstaller@0
            displayName: 'Use Terraform $(terraform_version)'
            inputs:
              terraformVersion: $(terraform_version)

          - script: |
              terraform init -backend-config="./variable/backend-jdld.tfvars" -backend-config="$(Agent.TempDirectory)/$(backend_main_secret_file_id1)" -reconfigure
              terraform destroy -var-file="./variable/main-jdld.tfvars" -var-file="$(Agent.TempDirectory)/$(backend_main_secret_file_id1)" -auto-approve
            displayName: 'Terraform Destroy'
            workingDirectory: './AzureDevops-Introduction/aks-k8s/'